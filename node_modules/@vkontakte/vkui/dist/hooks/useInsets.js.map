{"version":3,"sources":["../../src/hooks/useInsets.ts"],"names":["initialState","bottom","top","left","right","resolveInsets","e","detail","type","data","insets","vkBridge","subscribe","useInsets","setInsets","connectListener","unsubscribe"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;AAGA,IAAIA,YAA6B,GAAG;AAClCC,EAAAA,MAAM,EAAE,IAD0B;AAElCC,EAAAA,GAAG,EAAE,IAF6B;AAGlCC,EAAAA,IAAI,EAAE,IAH4B;AAIlCC,EAAAA,KAAK,EAAE;AAJ2B,CAApC;;AAgBA,SAASC,aAAT,CAAuBC,CAAvB,EAA+D;AAAA,kBACtCA,CAAC,CAACC,MADoC;AAAA,MACrDC,IADqD,aACrDA,IADqD;AAAA,MAC/CC,IAD+C,aAC/CA,IAD+C;;AAE7D,UAAQD,IAAR;AACE,SAAK,sBAAL;AACA,SAAK,sBAAL;AAA6B;AAA7B,UACUE,MADV,GACqBD,IADrB,CACUC,MADV;;AAEE,UAAIA,MAAJ,EAAY;AACV,iCACKA,MADL;AAEET,UAAAA,MAAM,EAAES,MAAM,CAACT,MAAP,GAAgB,GAAhB,GAAsB,CAAtB,GAA0BS,MAAM,CAACT,MAF3C,CAEmD;;AAFnD;AAID;;AATL;;AAWA,SAAO,IAAP;AACD;;AAEDU,kBAASC,SAAT,CAAmB,UAACN,CAAD,EAAoB;AACrC,MAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,MAAII,MAAJ,EAAY;AACVV,IAAAA,YAAY,GAAGU,MAAf;AACD;AACF,CALD;;AAOe,SAASG,SAAT,GAAsC;AAAA,kBACvB,qBAA0Bb,YAA1B,CADuB;AAAA;AAAA,MAC5CU,MAD4C;AAAA,MACpCI,SADoC;;AAGnD,wBAAU,YAAM;AACd,aAASC,eAAT,CAAyBT,CAAzB,EAAyC;AACvC,UAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,UAAII,MAAJ,EAAY;AACVI,QAAAA,SAAS,CAACJ,MAAD,CAAT;AACD;AACF;;AAEDC,sBAASC,SAAT,CAAmBG,eAAnB;;AACA,WAAO,YAAM;AACXJ,wBAASK,WAAT,CAAqBD,eAArB;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;AAcA,SAAOL,MAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { InsetsInterface } from './../types/props';\n\nlet initialState: InsetsInterface = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null,\n};\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nfunction resolveInsets(e: BridgeEvent): InsetsInterface | null {\n  const { type, data } = e.detail;\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets': // Устаревшее событие vk-bridge\n      const { insets } = data;\n      if (insets) {\n        return {\n          ...insets,\n          bottom: insets.bottom > 150 ? 0 : insets.bottom, // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n        };\n      }\n  }\n  return null;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const insets = resolveInsets(e);\n  if (insets) {\n    initialState = insets;\n  }\n});\n\nexport default function useInsets(): InsetsInterface {\n  const [insets, setInsets] = useState<InsetsInterface>(initialState);\n\n  useEffect(() => {\n    function connectListener(e: BridgeEvent) {\n      const insets = resolveInsets(e);\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return () => {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n\n  return insets;\n}\n"],"file":"useInsets.js"}