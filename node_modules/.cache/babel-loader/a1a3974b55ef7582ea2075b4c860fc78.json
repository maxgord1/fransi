{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useEffect, useState } from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nvar initialState = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null\n};\n\nfunction resolveInsets(e) {\n  var _e$detail = e.detail,\n      type = _e$detail.type,\n      data = _e$detail.data;\n\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets':\n      // Устаревшее событие vk-bridge\n      var insets = data.insets;\n\n      if (insets) {\n        return _objectSpread({}, insets, {\n          bottom: insets.bottom > 150 ? 0 : insets.bottom // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n\n        });\n      }\n\n  }\n\n  return null;\n}\n\nvkBridge.subscribe(function (e) {\n  var insets = resolveInsets(e);\n\n  if (insets) {\n    initialState = insets;\n  }\n});\nexport default function useInsets() {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      insets = _useState2[0],\n      setInsets = _useState2[1];\n\n  useEffect(function () {\n    function connectListener(e) {\n      var insets = resolveInsets(e);\n\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return function () {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n  return insets;\n}","map":{"version":3,"sources":["../../../src/hooks/useInsets.ts"],"names":["initialState","bottom","top","left","right","type","data","e","insets","vkBridge","resolveInsets","setInsets","useState","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AAGA,IAAIA,YAA6B,GAAG;AAClCC,EAAAA,MAAM,EAD4B,IAAA;AAElCC,EAAAA,GAAG,EAF+B,IAAA;AAGlCC,EAAAA,IAAI,EAH8B,IAAA;AAIlCC,EAAAA,KAAK,EAAE;AAJ2B,CAApC;;AAgBA,SAAA,aAAA,CAAA,CAAA,EAA+D;AAAA,MAAA,SAAA,GACtCG,CAAC,CADqC,MAAA;AAAA,MACrDF,IADqD,GAAA,SAAA,CAAA,IAAA;AAAA,MAC/CC,IAD+C,GAAA,SAAA,CAAA,IAAA;;AAE7D,UAAA,IAAA;AACE,SAAA,sBAAA;AACA,SAAA,sBAAA;AAA6B;AAA7B,UACUE,MADV,GACqBF,IADrB,CAAA,MAAA;;AAEE,UAAA,MAAA,EAAY;AACV,eAAA,aAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEEL,UAAAA,MAAM,EAAEO,MAAM,CAANA,MAAAA,GAAAA,GAAAA,GAAAA,CAAAA,GAA0BA,MAAM,CAF1C,MAAA,CAEmD;;AAFnD,SAAA,CAAA;AAID;;AATL;;AAWA,SAAA,IAAA;AACD;;AAEDC,QAAQ,CAARA,SAAAA,CAAmB,UAAA,CAAA,EAAoB;AACrC,MAAMD,MAAM,GAAGE,aAAa,CAA5B,CAA4B,CAA5B;;AACA,MAAA,MAAA,EAAY;AACVV,IAAAA,YAAY,GAAZA,MAAAA;AACD;AAJHS,CAAAA;AAOA,eAAe,SAAA,SAAA,GAAsC;AAAA,MAAA,SAAA,GACvBG,QAAQ,CADe,YACf,CADe;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC5CJ,MAD4C,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACpCG,SADoC,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGnDE,EAAAA,SAAS,CAAC,YAAM;AACd,aAAA,eAAA,CAAA,CAAA,EAAyC;AACvC,UAAML,MAAM,GAAGE,aAAa,CAA5B,CAA4B,CAA5B;;AACA,UAAA,MAAA,EAAY;AACVC,QAAAA,SAAS,CAATA,MAAS,CAATA;AACD;AACF;;AAEDF,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,eAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,eAAAA;AADF,KAAA;AATO,GAAA,EAATI,EAAS,CAATA;AAcA,SAAA,MAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { InsetsInterface } from './../types/props';\n\nlet initialState: InsetsInterface = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null,\n};\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nfunction resolveInsets(e: BridgeEvent): InsetsInterface | null {\n  const { type, data } = e.detail;\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets': // Устаревшее событие vk-bridge\n      const { insets } = data;\n      if (insets) {\n        return {\n          ...insets,\n          bottom: insets.bottom > 150 ? 0 : insets.bottom, // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n        };\n      }\n  }\n  return null;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const insets = resolveInsets(e);\n  if (insets) {\n    initialState = insets;\n  }\n});\n\nexport default function useInsets(): InsetsInterface {\n  const [insets, setInsets] = useState<InsetsInterface>(initialState);\n\n  useEffect(() => {\n    function connectListener(e: BridgeEvent) {\n      const insets = resolveInsets(e);\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return () => {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n\n  return insets;\n}\n"]},"metadata":{},"sourceType":"module"}