{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { canUseDOM } from '../../lib/dom';\nimport ConfigProviderContext from './ConfigProviderContext';\n\nvar ConfigProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConfigProvider, _React$Component);\n\n  function ConfigProvider(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConfigProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigProvider).call(this, props));\n\n    if (canUseDOM) {\n      _this.setScheme((context.document || window.document).body, _this.mapOldScheme(props.scheme));\n    }\n\n    return _this;\n  }\n\n  _createClass(ConfigProvider, [{\n    key: \"mapOldScheme\",\n    value: function mapOldScheme(scheme) {\n      switch (scheme) {\n        case 'client_light':\n          return 'bright_light';\n\n        case 'client_dark':\n          return 'space_gray';\n\n        default:\n          return scheme;\n      }\n    }\n  }, {\n    key: \"setScheme\",\n    value: function setScheme(target, scheme) {\n      target.setAttribute('scheme', scheme);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.scheme !== this.props.scheme) {\n        this.setScheme(this.document.body, this.mapOldScheme(this.props.scheme));\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isWebView: this.props.isWebView,\n        webviewType: this.props.webviewType,\n        scheme: this.mapOldScheme(this.props.scheme),\n        app: this.props.app\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigProviderContext.Provider, {\n        value: this.getChildContext()\n      }, this.props.children);\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || window.document;\n    }\n  }]);\n\n  return ConfigProvider;\n}(React.Component);\n\n_defineProperty(ConfigProvider, \"childContextTypes\", {\n  isWebView: PropTypes.bool,\n  scheme: PropTypes.string,\n  webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n  app: PropTypes.string\n});\n\n_defineProperty(ConfigProvider, \"defaultProps\", {\n  webviewType: 'internal',\n  isWebView: vkBridge.isWebView(),\n  scheme: 'bright_light'\n});\n\n_defineProperty(ConfigProvider, \"contextTypes\", {\n  document: PropTypes.object\n});\n\nexport { ConfigProvider as default };","map":{"version":3,"sources":["../../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["ConfigProvider","React","Component","context","window","props","isWebView","PropTypes","scheme","webviewType","app","string","vkBridge","document","object","target","prevProps"],"mappings":";;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,SAAA,QAAA,eAAA;AACA,OAAA,qBAAA,MAAA,yBAAA;;IAqBqBA,c;;;AACnB,WAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAwE;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACtE,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,cAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,QAAA,SAAA,EAAe;AACb,MAAA,KAAA,CAAA,SAAA,CAAe,CAACG,OAAO,CAAPA,QAAAA,IAAoBC,MAAM,CAA3B,QAAA,EAAf,IAAA,EAA2D,KAAA,CAAA,YAAA,CAAkBC,KAAK,CAAlF,MAA2D,CAA3D;AACD;;AAJqE,WAAA,KAAA;AAKvE;;;;iCAuBYG,M,EAAuC;AAClD,cAAA,MAAA;AACE,aAAA,cAAA;AACE,iBAAA,cAAA;;AACF,aAAA,aAAA;AACE,iBAAA,YAAA;;AACF;AACE,iBAAA,MAAA;AANJ;AAQD;;;8BAESO,M,EAAqBP,M,EAAuC;AACpEO,MAAAA,MAAM,CAANA,YAAAA,CAAAA,QAAAA,EAAAA,MAAAA;AACD;;;uCAEkBC,S,EAAgC;AACjD,UAAIA,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAAzB,MAAA,EAA4C;AAC1C,aAAA,SAAA,CAAe,KAAA,QAAA,CAAf,IAAA,EAAmC,KAAA,YAAA,CAAkB,KAAA,KAAA,CAArD,MAAmC,CAAnC;AACD;AACF;;;sCAEsC;AACrC,aAAO;AACLV,QAAAA,SAAS,EAAE,KAAA,KAAA,CADN,SAAA;AAELG,QAAAA,WAAW,EAAE,KAAA,KAAA,CAFR,WAAA;AAGLD,QAAAA,MAAM,EAAE,KAAA,YAAA,CAAkB,KAAA,KAAA,CAHrB,MAGG,CAHH;AAILE,QAAAA,GAAG,EAAE,KAAA,KAAA,CAAWA;AAJX,OAAP;AAMD;;;6BAEQ;AACP,aACE,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAA,QAAA,EAAA;AAAgC,QAAA,KAAK,EAAE,KAAA,eAAA;AAAvC,OAAA,EACG,KAAA,KAAA,CAFL,QACE,CADF;AAKD;;;wBAxCwB;AACvB,aAAO,KAAA,OAAA,CAAA,QAAA,IAAyBN,MAAM,CAAtC,QAAA;AACD;;;;EA3ByCH,KAAK,CAACC,S;;gBAA7BF,c,uBAQwC;AACzDM,EAAAA,SAAS,EAAEC,SAAS,CADqC,IAAA;AAEzDC,EAAAA,MAAM,EAAED,SAAS,CAFwC,MAAA;AAGzDE,EAAAA,WAAW,EAAEF,SAAS,CAATA,KAAAA,CAAgB,CAAA,QAAA,EAH4B,UAG5B,CAAhBA,CAH4C;AAIzDG,EAAAA,GAAG,EAAEH,SAAS,CAACI;AAJ0C,C;;gBARxCX,c,kBAewB;AACzCS,EAAAA,WAAW,EAD8B,UAAA;AAEzCH,EAAAA,SAAS,EAAEM,QAAQ,CAFsB,SAE9BA,EAF8B;AAGzCJ,EAAAA,MAAM,EAAE;AAHiC,C;;gBAfxBR,c,kBAqB8B;AAC/Ca,EAAAA,QAAQ,EAAEN,SAAS,CAACO;AAD2B,C;;SArB9Bd,c","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes, { Requireable } from 'prop-types';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { canUseDOM } from '../../lib/dom';\nimport ConfigProviderContext, { ConfigProviderContextInterface } from './ConfigProviderContext';\n\nexport interface ConfigProviderProps extends ConfigProviderContextInterface {\n  children?: ReactNode;\n}\n\nexport interface ConfigProviderContext {\n  document: Document;\n}\n\nexport interface ConfigProviderContextType {\n  document: Requireable<{}>;\n}\n\nexport interface ConfigProviderChildContextType {\n  isWebView: Requireable<boolean>;\n  scheme: Requireable<string>;\n  webviewType: Requireable<'vkapps' | 'internal'>;\n  app: Requireable<string>;\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor(props: ConfigProviderProps, context: ConfigProviderContext) {\n    super(props);\n    if (canUseDOM) {\n      this.setScheme((context.document || window.document).body, this.mapOldScheme(props.scheme));\n    }\n  }\n\n  static childContextTypes: ConfigProviderChildContextType = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.string,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string,\n  };\n\n  static defaultProps: ConfigProviderProps = {\n    webviewType: 'internal',\n    isWebView: vkBridge.isWebView(),\n    scheme: 'bright_light',\n  };\n\n  static contextTypes: ConfigProviderContextType = {\n    document: PropTypes.object,\n  };\n\n  get document(): Document {\n    return this.context.document || window.document;\n  }\n\n  mapOldScheme(scheme: ConfigProviderProps['scheme']) {\n    switch (scheme) {\n      case 'client_light':\n        return 'bright_light';\n      case 'client_dark':\n        return 'space_gray';\n      default:\n        return scheme;\n    }\n  }\n\n  setScheme(target: HTMLElement, scheme: ConfigProviderProps['scheme']) {\n    target.setAttribute('scheme', scheme);\n  }\n\n  componentDidUpdate(prevProps: ConfigProviderProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.setScheme(this.document.body, this.mapOldScheme(this.props.scheme));\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.mapOldScheme(this.props.scheme),\n      app: this.props.app,\n    };\n  }\n\n  render() {\n    return (\n      <ConfigProviderContext.Provider value={this.getChildContext()}>\n        {this.props.children}\n      </ConfigProviderContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}